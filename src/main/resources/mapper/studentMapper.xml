<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace必须指定,作用类似java的package-->
<mapper namespace="mapper.StudentMapper">
    <!--parameterType指定要保存的数据类型。该属性一般情况下可以省略不写-->
    <!--SQL语句：
            #{name}表示占位符，对应的是parameterType类型的属性名称（getter或setter去掉get或set然后首字母小写）
            表示获取name的取值
    -->
   <!-- <insert id="saveStudent" parameterType="pojo.Student">
        INSERT INTO t_students(id,`name`,gender,grade) VALUES(NULL,#{name},#{gender},#{grade})
    </insert>-->
    <sql id="sql1">select * from t_students</sql>
    <update id="updateStudent">
        UPDATE t_students SET `name`=#{name},gender=#{gender},grade=#{grade} WHERE id=#{id}
    </update>
    <!--由于参数是一个简单类型（8中基本和String），且参数只有一个，占位符名称随便写-->
    <delete id="deleteStudent" parameterType="int">
        DELETE FROM t_students    WHERE id=#{id}
    </delete>
    <!--resultType不能省略：结果集封装的目标类型。仅限于查询结果集的字段名和实体类属性名一致的情况-->
    <select id="findStudents" resultType="pojo.Student">
        <include refid="sql1"/> 
    </select>

    <!--2.1: Mapper接口中的方法参数只有一个简单类型的参数-->
    <select id="findStudentById" parameterType="int" resultType="pojo.Student">
        <include refid="sql1"/>  where id=#{随便写};
    </select>
    <!--2.2: Mapper接口中的方法参数有多个简单类型的参数-->
    <!--小结:采用mybatis内置的引用名称。argO或param1,表示第一个参数占位符,arg1,或param2表示第二个占位符，依次类推。-->
    <!--2.2.1.StudentMapper接口中：Student findStudent1(Integer id,String name);-->
    <select id="findStudent1" resultType="pojo.Student">
        <include refid="sql1"/>  where id=#{arg0} and name=#{arg1};
    </select>
    <!--2.2.2 StudentMapper接口中：id,@Param("name") String name);-->
    <!--Available parameters are [name, id, param1, param2]-->
    <select id="findStudent2"  resultType="pojo.Student">
            <include refid="sql1"/>  where id=#{id} and name=#{name};
    </select>
    <!--<select id="findStudent2"  resultType="pojo.Student">
        <include refid="sql1"/>  where id=#{param1} and name=#{param2};
    </selec-->
    <!--<select id="findStudent2"  resultType="pojo.Student">
       <include refid="sql1"/>  where id=#{arg0} and name=#{arg1};
   </select>-->
    <!--2.2.3 map结构，占位符的名称就是map的key。-->
    <select id="findStudents1"  resultType="pojo.Student">
        <include refid="sql1"/>  where id=#{idd} and name=#{name};
    </select>
    <!--3.模糊查询测试-->
    <select id="findStudentsByName"  resultType="pojo.Student">
        <include refid="sql1"/>  where name like concat('%',#{name},'%');
    </select>

    <!--4.数据库别名查询：-->
   <!-- <select id="findStudents2"  resultType="pojo.Student">
        select id sid ,name sname ,gender sgender from t_students;
    </select>-->
    <!--5.ResultType结果集的自动映射-->
    <select id="findStudents4"  resultType="pojo.Student">
        select id sid ,name sname ,gender, native_province from t_students;
    </select>
    <!--6.ResultMap-->
    <resultMap id="studentMap" type="pojo.Student">
        <!--id映射主键个数-->
        <id column="sid" property="id"/>
        <!--result映射非主键个数-->
        <result column="sgender" property="gender"/>
        <result column="sname" property="name" />
        <result column="sgrade" property="grade"/>
        <result column="native_province" property="nativeProvince"/>
    </resultMap>
    <select id="findAl1Students" resultMap="studentMap">
        SELECT id sid,NAME sname,gender sgender,grade sgrade, native_province FROM t_students
    </select>
    <!--7.获取数据库生成的主键-->
    <!--7.1.方式一:适用于支持主键自动增长的数据库，比如Mysql,Sql Server等
        useGeneratedKeys:true。获取数据库生成的主键
        keyColumn：主键字段名
        keyProperty：接收主键字段值的实体类属性名
    -->
    <insert id="saveStudent" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into t_students (id,name,gender,grade,native_province) values(null,#{name},#{gender},#{grade},#{nativeProvince})
    </insert>
    <!--7.2方式二:对于不支持主键自动增长的数据-->
    <insert id="saveStudent1">
        <!--获取数据库生成的主键：
            keyColumn：主键字段名
            keyProperty：接收主键字段值的实体类属性名
            resultType：主键的类型
            order：语句在插入之后还是之前执行
        -->
        <selectKey keyColumn="id" keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into t_students (id,name,gender,grade,native_province) values(null,#{name},#{gender},#{grade},#{nativeProvince})
    </insert>
    <!--8.-->
    <!--where:
            如果没有主体内容，什么都不做。
            如果有主体内容，自动加上where关键字，并且会去掉第一个and字符
    -->
    <select id="findStudents5" resultType="pojo.Student">
        select * from t_students
        <trim prefix="where" prefixOverrides="and">
#         =<where/>
            <if test="name!=null">
                and name=#{name}
            </if>
            <if test="nativeProvince!=null">
                and native_province=#{nativeProvince}
            </if>
        </trim>
    </select>
</mapper>